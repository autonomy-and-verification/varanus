--5.2 Emergency and Protective stop

-- 5.2.1(1)
EPS1 =
  safe_state_key.PresentOn -> safe_stop_cat1 -> EPS1
  |~|
  safe_stop_cat1 -> EPS1
  |~|
  protective_stop -> safe_stop_cat1  -> EPS1

assert EPS1 [F= MASCOT_SAFETY_SYSTEM\( diff(Events, {|safe_state_key.PresentOn, protective_stop, safe_stop_cat1|}) )


-- 5.2.1(2)
--EPS should:  "Take precedence over all other system functions"

-- This just says that the system can do this, not that there aren't other options.
assert MASCOT_SAFETY_SYSTEM :[has trace]: <system_init, speed.1250, protective_stop>


EPS2A =
system_init -> EPS2A'

EPS2A'=
(
  ([] e : diff(Events, {|system_init,  speed, protective_stop, speed_ok|})  @ e->EPS2A')
  []
  speed?s -> (protective_stop -> EPS2A' [] speed_ok -> EPS2A' )
)

-- This says that after system_init, events can happen, but when speed happens it will eventually do protective_stop or speed_ok, before checking the speed again.
assert EPS2A [T= MASCOT_SAFETY_SYSTEM

EPS2B =
system_init -> EPS2B_AM

EPS2B_AM =
(
speed?s:AutonomousSafeSpeeds -> speed_ok -> EPS2B_AM
[]
speed?s:AutonomousUnSafeSpeeds -> protective_stop -> EPS2B_AM
[]
foot_pedal_pressed.True -> EPS2B_HOM
[]
enter_master_commissioning_state -> EPS2B_UnMon(AM)
[]
enter_safe_state -> EPS2B_AM
)

EPS2B_HOM =
(
  speed?s:HandsOnSafeSpeeds -> speed_ok -> EPS2B_HOM
  []
  speed?s:HandsOnUnSafeSpeeds -> protective_stop -> EPS2B_HOM
  []
  foot_pedal_pressed.False -> EPS2B_AM
  []
  enter_master_commissioning_state -> EPS2B_UnMon(HOM)
  []
  enter_safe_state -> EPS2B_HOM
)

EPS2B_UnMon(lastMode) =
speed?_ -> speed_ok -> EPS2B_UnMon(lastMode)
[]
(
if lastMode == HOM then
  enter_safe_state -> EPS2B_HOM

else if lastMode == AM then
  enter_safe_state -> EPS2B_AM
else
  SKIP
)
[]
foot_pedal_pressed.False -> EPS2B_UnMon(AM)
[]
foot_pedal_pressed.True -> EPS2B_UnMon(HOM)

-- This says that when speed happens, speed_ok or protective_stop (as appropriate) will happen.
-- This checks the state changes from foot_pedal_pressed and master commissioning state
assert EPS2B [T= MASCOT_SAFETY_SYSTEM\(diff(Events, {|system_init, speed, protective_stop, speed_ok, foot_pedal_pressed, enter_master_commissioning_state, enter_safe_state |}))


-- 5.2.1(4),(5), (6)
-- (4) Remain Active until reset
-- (5) On reset by a manual action that does not cayuse a resstart after resetting, but shall only permis a restart to occurr...
-- (6) Provide and output signal to indicate when the system is in the Safe State
EPS3 =
  safe_stop_cat1 ->
    (
      (enter_safe_state -> EPS3_SAFE)
      []
      (enter_slave_commissioning_state -> EPS3_SLAVE_COM)
    )
  []
  systemStateIs.NotSafeState -> EPS3

EPS3_SAFE =
  systemStateIs.SafeState -> EPS3_SAFE
  []
  reset -> EPS3_RESETTING
  []
  safe_state_key.PresentOff -> EPS3_RESETTING

EPS3_RESETTING =
  enter_master_commissioning_state ->  EPS3_MASTER_COM
  []
  systemStateIs.SafeState -> EPS3_RESETTING
  []
  restart -> EPS3_RESTARTING

EPS3_MASTER_COM =
  leave_safe_state ->EPS3_MASTER_COM
  []
  systemStateIs.NotSafeState -> EPS3_MASTER_COM
  []
  safe_stop_cat1 ->
  (
    (enter_safe_state -> EPS3_SAFE)
    []
    (enter_slave_commissioning_state -> EPS3_SLAVE_COM)
  )

EPS3_SLAVE_COM =
  systemStateIs.NotSafeState -> EPS3_SLAVE_COM
  []
  leave_slave_commissioning_state -> EPS3
  []
  safe_stop_cat1 -> enter_safe_state -> EPS3_SAFE

EPS3_RESTARTING =
  systemStateIs.SafeState -> EPS3_RESTARTING
  []
  leave_safe_state -> EPS3


assert EPS3 [T= MASCOT_SAFETY_SYSTEM\(
 diff(Events, {|safe_stop_cat1, enter_safe_state, leave_safe_state,
 systemStateIs, reset, restart, safe_state_key.PresentOff,
 enter_master_commissioning_state, enter_slave_commissioning_state, leave_slave_commissioning_state|}) )

assert not MASCOT_SAFETY_SYSTEM
[|Events|]
(safe_state_key.PresentOn -> emergency_stop ->
safe_stop_cat1-> enter_safe_state -> reset ->
|~| e:Events @ e -> restart -> SKIP)
:[deadlock free]


-- 5.3 Safe State Key Switch

-- This just says that if the safe_state_key is Present and On, then we do an emergency_stop
KEY_SWITCH1 = safe_state_key.PresentOn -> emergency_stop -> KEY_SWITCH1
assert KEY_SWITCH1 [F= MASCOT_SAFETY_SYSTEM\( diff(Events, {|safe_state_key.PresentOn, emergency_stop|}) )

-- 5.3 Sentence 2
KEY_SWITCH2 =
  safe_state_key.PresentOn -> enter_safe_state -> KEY_SWITCH2_SAFE
  |~|
  enter_safe_state -> KEY_SWITCH2_SAFE

KEY_SWITCH2_SAFE=
    restart -> KEY_SWITCH2
    |~|
    enter_master_commissioning_state -> KEY_SWITCH2
    |~|
    safe_state_key.PresentOff -> (restart -> KEY_SWITCH2 [] enter_master_commissioning_state -> KEY_SWITCH2)
    |~|
    systemStateIs.SafeState -> KEY_SWITCH2
    |~|
    safe_state_key.Removed -> KEY_SWITCH2_REMOVED

KEY_SWITCH2_REMOVED =
  safe_state_key.Replaced -> KEY_SWITCH2_SAFE

-- This checks that if the keywitch is used, then we enter the safe state, and
-- if the key is removed, then it must be replaced before restart can happen
assert KEY_SWITCH2 [F= MASCOT_SAFETY_SYSTEM\( diff(Events, {| safe_state_key, enter_safe_state, restart, enter_master_commissioning_state |}) )


-- 5.4 Master Commissioning Mode Key Switch

-- 5.4.1:2
MCM_SWITCH1 =
  master_commissioning_switch.MCM_On ->
  (
    reset ->  enter_master_commissioning_state -> MCM_SWITCH1
    |~|
    master_commissioning_switch.MCM_Off -> MCM_SWITCH1
  )
--To let the implementation reset withouth the MCM Switch
  |~| reset ->  MCM_SWITCH1
assert MCM_SWITCH1 [F= MASCOT_SAFETY_SYSTEM\( diff(Events, {|reset, master_commissioning_switch, enter_master_commissioning_state |}) )

-- 5.4.1(3)
-- When the safety system enters the Safe State then the Safety System will leave the Master Commisioning State
MCM_SWITCH2 =
enter_safe_state -> leave_safe_state -> MCM_SWITCH2
[]
enter_safe_state -> enter_master_commissioning_state -> leave_safe_state -> MCM_SWITCH2

assert MCM_SWITCH2 [T= MASCOT_SAFETY_SYSTEM\(
diff(Events, {| enter_master_commissioning_state, leave_safe_state, enter_safe_state |}) )

-- 5.4.1(4)
-- ...does not issue a protective stop when the safe speed monitoring speed threshold
-- has been exceeded.
MCM_SWITCH3a =
  enter_master_commissioning_state -> leave_safe_state-> MCM_SWITCH3a_MCM
  |~|
  protective_stop ->  MCM_SWITCH3a
  |~|
  leave_safe_state -> MCM_SWITCH3a

MCM_SWITCH3a_MCM =
  leave_master_commissioning_state -> MCM_SWITCH3a
  |~|
  -- Becasue a leave means we've entered the safe state, so left the MCM state
 leave_safe_state -> MCM_SWITCH3a


assert MCM_SWITCH3a [F= MASCOT_SAFETY_SYSTEM\(
diff(Events, {|enter_master_commissioning_state, leave_master_commissioning_state, protective_stop, leave_safe_state|}) )

MCM_SWITCH3b =
  safe_state_key.PresentOn -> emergency_stop -> safe_stop_cat1 -> enter_safe_state -> reset -> master_commissioning_switch.MCM_On ->
  enter_master_commissioning_state -> protective_stop -> MCM_SWITCH3b

assert not MCM_SWITCH3b
  [| Events |]
  MASCOT_SAFETY_SYSTEM\( diff(Events, {|enter_master_commissioning_state, leave_master_commissioning_state, protective_stop, safe_state_key.PresentOn, emergency_stop, enter_safe_state, reset,master_commissioning_switch.MCM_On |}) ) :[deadlock free]

-- 5.5 Slave Commissioning Mode Key switch

-- 5.5.1(1)
-- Perform the same function as the Safe State Key Switch with the exception that the system
-- shall enter the Commissioning State rather than Safe State on the completion of the Safe Stop
-- Category 1 (SS1) function.

SCM_SWITCH1=
 slave_commissioning_switch.SCM_On -> safe_stop_cat1 -> enter_slave_commissioning_state -> SCM_SWITCH1
[]
-- Allowing safe state key to be used
safe_stop_cat1 -> SCM_SWITCH1

assert SCM_SWITCH1 [T= MASCOT_SAFETY_SYSTEM\(
diff(Events, {|slave_commissioning_switch.SCM_On, enter_slave_commissioning_state, safe_stop_cat1|}) )

-- 5.5.1(2c)
-- The Commissioning State entered is defined as the Safe State with the following differences:...
-- (c) The Safe State output signal provided indicates that the system is not in the Safe State.
SCM_SWITCH2 =
slave_commissioning_switch.SCM_On -> enter_slave_commissioning_state -> SCM_SWITCH2_SCS
[]
systemStateIs.NotSafeState -> SCM_SWITCH2
[]
leave_safe_state -> SCM_SWITCH2

SCM_SWITCH2_SCS =
  systemStateIs.NotSafeState -> SCM_SWITCH2_SCS
  []
  slave_commissioning_switch.SCM_Off -> leave_slave_commissioning_state -> SCM_SWITCH2
  []
  leave_safe_state -> SCM_SWITCH2

assert SCM_SWITCH2 [T= MASCOT_SAFETY_SYSTEM\(
  diff(Events, {|slave_commissioning_switch, systemStateIs.NotSafeState, enter_slave_commissioning_state, leave_slave_commissioning_state, leave_safe_state|}) )


--5.5.1(3)
-- As implied by items 1 & 2, the system cannot be enabled until the commissioning mode has
-- been disabled.
SCM_SWITCH3 =
  SCM_SWITCH3_ENABLED

SCM_SWITCH3_ENABLED =
  slave_commissioning_switch.SCM_On -> SCM_SWITCH3_COMM
  []
  enter_autonomous_mode -> SCM_SWITCH3_ENABLED
  []
  enter_hands_on_mode -> SCM_SWITCH3_ENABLED

SCM_SWITCH3_COMM =
  slave_commissioning_switch.SCM_Off -> SCM_SWITCH3_ENABLED

assert SCM_SWITCH3 [T= MASCOT_SAFETY_SYSTEM\(
 diff(Events, {|slave_commissioning_switch, enter_hands_on_mode, enter_autonomous_mode|}) )


-- 5.6 Master Safe Speed Monitoring

-- 5.6.1(5),(6), and (7)
-- (5) The actuator speed limits are set such that the linear speed limit at the wrist does not exceed
-- 500mm/s for a manipulator arm running in autonomous mode.
-- (6) The actuator speed limits are set such that the linear speed limit at the wrist does not exceed
-- the Mascot 4.5 baseline wrist maximum speed of 1000mms/s when the master is used in
-- ‘hands on mode’ aka. bilateral operation.
-- (7) Initiate a Protective Stop if the speed threshold is exceeded.

channel get_monitoring : Bool
channel get_limit : Speed

SSM1 =
system_init ->
(
SSM1_SPEED
[|{| get_monitoring, get_limit, speed, protective_stop, speed_ok |}|]
SSM1_STATE(True, AutonomousSafeSpeed)
)

ssm1_stateAlpha =
  {|enter_master_commissioning_state, leave_master_commissioning_state, system_init,
  foot_pedal_pressed, get_monitoring, get_limit, leave_safe_state |}

SSM1_STATE(monitoring, limit) =
enter_master_commissioning_state -> leave_safe_state ->SSM1_STATE(False, limit)
[]
leave_master_commissioning_state -> SSM1_STATE(True, limit)
[]
leave_safe_state -> SSM1_STATE(True, limit)
[]
system_init -> SSM1_STATE(monitoring, AutonomousSafeSpeed)
[]
foot_pedal_pressed.True -> SSM1_STATE(monitoring,HandsOnSafeSpeed )
[]
foot_pedal_pressed.False -> SSM1_STATE(monitoring,AutonomousSafeSpeed )
[]
speed?_ -> get_monitoring!monitoring -> get_limit!limit ->
  (protective_stop -> SSM1_STATE(monitoring, limit) [] speed_ok -> SSM1_STATE(monitoring, limit) )

SSM1_SPEED =
speed?s ->
get_monitoring?m -> get_limit?limit ->
if m == True and s > limit then
  protective_stop -> SSM1_SPEED
else
  speed_ok -> SSM1_SPEED



assert SSM1\{|get_limit, get_monitoring|} [F= MASCOT_SAFETY_SYSTEM\( diff(Events,
  {|system_init, foot_pedal_pressed, speed, protective_stop, speed_ok,
     leave_master_commissioning_state, enter_master_commissioning_state, leave_safe_state |}) )



--5.7 Hands on Mode Monitoring

--5.7.1(6)
--The monitored foot pedal is the only way for Hands-on Mode to be entered.
HMM1 = foot_pedal_pressed.True -> enter_hands_on_mode -> HMM1

assert HMM1 [F= MASCOT_SAFETY_SYSTEM\( diff(Events, {|foot_pedal_pressed.True, enter_hands_on_mode |}) )

-- 5.7.1(7)
-- Autonomous mode is entered if the control system indicates it is no longer in Hands-on Mode.
HMM2 =
  foot_pedal_pressed.False -> enter_autonomous_mode -> HMM2
  |~|
  enter_autonomous_mode -> HMM2

assert HMM2 [F= MASCOT_SAFETY_SYSTEM\( diff(Events, {|foot_pedal_pressed.False, enter_autonomous_mode |}) )

-- 5.7.1(8)
-- The HMM defaults to autonomous mode when in the safe state.

-- Wasn't sure what this point meant, the model doesn't do anything with now,
-- so I've dropped the check

--HMM3 =
--  enter_safe_state -> enter_autonomous_mode -> HMM3
--  |~|
--  enter_autonomous_mode -> HMM3
--
--assert HMM3 [F= MASCOT_SAFETY_SYSTEM\( diff(Events, {|enter_safe_state, enter_autonomous_mode |}) )
