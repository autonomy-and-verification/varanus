channel l, b, z, y, a, c

state0 = 
l -> state3
[]
b -> state3
[]
z -> state3
[]
y -> state3
[]
a -> state3
[]
c -> state3

state1 = 
l -> state1
[]
b -> state1
[]
z -> state1
[]
y -> state1
[]
a -> state1
[]
c -> state1

state2 = 
c -> state1
[]
l -> state2
[]
b -> state2
[]
z -> state2
[]
y -> state2
[]
a -> state7

state3 = 
c -> state1
[]
l -> state2
[]
z -> state3
[]
y -> state3
[]
b -> state6
[]
a -> state9

state4 = 
z -> state4
[]
y -> state4
[]
a -> state4
[]
c -> state4
[]
b -> state5
[]
l -> state13

state5 = 
b -> state5
[]
y -> state5
[]
a -> state5
[]
c -> state5
[]
l -> state13
[]
z -> state13

state6 = 
c -> state1
[]
l -> state2
[]
z -> state2
[]
b -> state6
[]
y -> state6
[]
a -> state11

state7 = 
c -> state1
[]
l -> state2
[]
b -> state2
[]
z -> state2
[]
y -> state2
[]
a -> state7

state8 = 
l -> state1
[]
b -> state1
[]
z -> state1
[]
y -> state1
[]
c -> state1
[]
a -> state8

state9 = 
c -> state1
[]
l -> state2
[]
z -> state3
[]
y -> state3
[]
b -> state6
[]
a -> state9

state10 = 
l -> state1
[]
b -> state1
[]
z -> state1
[]
y -> state1
[]
c -> state1
[]
a -> state10

state11 = 
c -> state1
[]
l -> state2
[]
z -> state2
[]
b -> state6
[]
y -> state6
[]
a -> state11

state12 = 
l -> state1
[]
b -> state1
[]
z -> state1
[]
y -> state1
[]
c -> state1
[]
a -> state12

state13 = 
l -> state13
[]
b -> state13
[]
z -> state13
[]
y -> state13
[]
a -> state13
[]
c -> state13

WCST = state0 -- Main Process, starts the recursion in state0

assert state0; RUN(Events) :[deadlock free]:
assert state0 :[deterministic]:
assert state0 :[divergence free]: