channel u, b, f, l, r

state0 = 
b -> state6
[]
f -> state9
[]
l -> state9
[]
r -> state10
[]
u -> state11

state1 = 
r -> state7
[]
u -> state14
[]
b -> state14
[]
f -> state14
[]
l -> state14

state2 = 
r -> state7
[]
u -> state14
[]
b -> state14
[]
f -> state14
[]
l -> state14

state3 = 
u -> state14
[]
b -> state14
[]
f -> state14
[]
l -> state14
[]
r -> state14

state4 = 
u -> state14
[]
b -> state14
[]
f -> state14
[]
l -> state14
[]
r -> state14

state5 = 
u -> state14
[]
b -> state14
[]
f -> state14
[]
l -> state14
[]
r -> state14

state6 = 
b -> state6
[]
f -> state9
[]
l -> state9
[]
r -> state10
[]
u -> state11

state7 = 
r -> state7
[]
u -> state14
[]
b -> state14
[]
f -> state14
[]
l -> state14

state8 = 
b -> state6
[]
f -> state9
[]
l -> state9
[]
r -> state10
[]
u -> state11

state9 = 
b -> state6
[]
f -> state9
[]
l -> state9
[]
r -> state10
[]
u -> state11

state10 = 
b -> state6
[]
f -> state9
[]
l -> state9
[]
r -> state10
[]
u -> state11

state11 = 
u -> state14
[]
b -> state14
[]
f -> state14
[]
l -> state14
[]
r -> state14

state12 = 
r -> state7
[]
u -> state14
[]
b -> state14
[]
f -> state14
[]
l -> state14

state13 = 
r -> state7
[]
u -> state14
[]
b -> state14
[]
f -> state14
[]
l -> state14

state14 = 
u -> state14
[]
b -> state14
[]
f -> state14
[]
l -> state14
[]
r -> state14

WCST = state0 -- Main Process, starts the recursion in state0

assert state0; RUN(Events) :[deadlock free]:
assert state0 :[deterministic]:
assert state0 :[divergence free]: