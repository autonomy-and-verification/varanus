--Assume: The radiation from the sensors is less than or equal to 0

--Guarantee: If the command received was to inspect waypoint i, then eventually waypoint i will be 
-- inspected; and the radiation at waypoint i will be categorised as either green, orange, or red

--include "defs.csp"

radiation_inputs = {|sensors, inspect|}
radiation_outputs = {| radiation_level, inspectedCall, inspectedRet |}

channel add_inspected : waypointID

rm_guar = (inspect?i -> 
			(
				sensors?reading:({0, 50}) -> radiation_level!Green -> add_inspected!i -> RUN(Events)
				[]
				sensors?reading:({120, 150}) -> radiation_level!Orange -> RUN(Events)
				[]
				sensors?reading:({250, 300}) -> radiation_level!Red  -> RUN(Events)
				
			)
		[|{|add_inspected|}|]
		inspected_handler({})
		) \{|add_inspected|}

inspected_handler(inspected_waypoints) =
add_inspected?i -> inspected_handler(union(inspected_waypoints, {i}) )
[]
inspectedCall?j:(inspected_waypoints) -> inspectedRet.True -> inspected_handler(inspected_waypoints)
[]
inspectedCall?k:(diff(waypointID, inspected_waypoints)) -> inspectedRet.False -> inspected_handler(inspected_waypoints)

  


assert rm_guar :[deadlock free]
assert rm_guar :[divergence free]
assert rm_guar :[deterministic]
