-- Abstract inspection rover

--Guarantee A: If the Robot is at waypoint i and it has inspected that waypoint and the radition level was not dangerous, then it will move to the next waypoint or to the original waypoint (the exit) if there is no next waypoint.

-- Guarantee B: And, if the Robot is at waypoint i and it has not been inspected, then the Robot will inspect it.

-- Guarantee C: And, if the Robot inspects a waypoint and the radiation level is dangerous, then the Robot will return to the original waypoint (the exit)
include "abstract_defs.csp"


ROVER(current_waypoint, inspected) = 

(not member(current_waypoint, inspected))& INSPECT(current_waypoint, inspected)
[]
inspect?wp:(diff(waypointID, inspected)) -> ROVER(wp, inspected)
[]
(inspected == waypointID) & mission_complete -> MOVE_TO_DOOR

INSPECT(i, inspected) = 
	move.i -> RADIATION_CHECK(i, inspected)

RADIATION_CHECK(i, inspected) =
radiation_level?Green ->  ROVER(i, union(inspected, {i}) ) 
[]
radiation_level?r:({Orange, Red}) -> mission_abort -> MOVE_TO_DOOR

MOVE_TO_DOOR = move.0 -> SKIP

MOVE_TO_NEXT(current_waypoint, inspected) = 
	if member(current_waypoint + 1, waypointID) then 
		move.current_waypoint + 1 -> ROVER(current_waypoint + 1, union(inspected, {current_waypoint}) )
	else
		MOVE_TO_DOOR

-- This top-level process allows the mission to restart
ROVER_SYSTEM =
mission_start ->
ROVER(0, {}) ; ROVER_SYSTEM

--Check Single Rover Run
assert ROVER(0, {}); RUN(Events) :[deadlock free]
assert ROVER(0, {}) :[divergence free]
assert ROVER(0, {}) :[deterministic]


--Check Repeated Rover Runs
assert ROVER_SYSTEM :[deadlock free]
assert ROVER_SYSTEM :[divergence free]
assert ROVER_SYSTEM :[deterministic]

--Check Hiding
assert ROVER_SYSTEM\{|mission_start, mission_complete, mission_abort|} :[deadlock free]
assert ROVER_SYSTEM\{|mission_start, mission_complete, mission_abort|} :[divergence free]
assert ROVER_SYSTEM\{|mission_start, mission_complete, mission_abort|} :[deterministic]

-- Ordering: this has to be first for the pattern matching...
ROVER2({}) = mission_complete -> SKIP

ROVER2(WaypointSet) = 	
	inspect?wp:(WaypointSet) ->
	move.wp ->
	(
		get_rad?r:({Red, Orange}) -> move.0 -> mission_abort -> SKIP
		[]
		get_rad?Green -> ROVER2(diff(WaypointSet, {wp}))	 -- Ordering is important in diff()
	)
	


RAD_MON(rad) =
	radiation_level?new_rad -> RAD_MON(new_rad)
	[]
	get_rad!rad -> RAD_MON(rad)
	[]
	mission_abort -> SKIP
	[]
	mission_complete -> SKIP
	
ROVER_SYSTEM2 =
mission_start ->
(	
	ROVER2(waypointID) 
	[|{|mission_abort, mission_complete, get_rad|}|]
	RAD_MON(Green)
)--\{|get_rad|}
; ROVER_SYSTEM2


--Check Single Rover Run
assert ROVER2(waypointID); RUN(Events) :[deadlock free]
assert ROVER2(waypointID) :[divergence free]
assert ROVER2(waypointID) :[deterministic]


--Check Repeated Rover Runs
assert ROVER_SYSTEM2 :[deadlock free]
assert ROVER_SYSTEM2 :[divergence free]
assert ROVER_SYSTEM2 :[deterministic]

assert ROVER_SYSTEM2\{|get_rad|} :[deadlock free]
assert ROVER_SYSTEM2\{|get_rad|} :[divergence free]
assert ROVER_SYSTEM2\{|get_rad|} :[deterministic]


--Check Hiding
assert ROVER_SYSTEM2\{|mission_start, mission_complete, mission_abort|} :[deadlock free]
assert ROVER_SYSTEM2\{|mission_start, mission_complete, mission_abort|} :[divergence free]
assert ROVER_SYSTEM2\{|mission_start, mission_complete, mission_abort|} :[deterministic]

ROVER3({}) = mission_complete -> SKIP

ROVER3(WaypointSet) = 	
	inspect?wp:(WaypointSet) ->
	move.wp ->
	(
		radiation_level?r:({Red, Orange}) -> move.0 -> mission_abort -> SKIP
		[]
		radiation_level?Green -> ROVER3(diff(WaypointSet, {wp}))	 -- Ordering is important in diff()
	)
	

	
ROVER_SYSTEM3 =
mission_start ->
ROVER3(waypointID) 
; ROVER_SYSTEM3


--Check Single Rover Run
assert ROVER3(waypointID); RUN(Events) :[deadlock free]
assert ROVER3(waypointID) :[divergence free]
assert ROVER3(waypointID) :[deterministic]


--Check Repeated Rover Runs
assert ROVER_SYSTEM3 :[deadlock free]
assert ROVER_SYSTEM3 :[divergence free]
assert ROVER_SYSTEM3 :[deterministic]

--Check Hiding
assert ROVER_SYSTEM3\{|mission_start, mission_complete, mission_abort|} :[deadlock free]
assert ROVER_SYSTEM3\{|mission_start, mission_complete, mission_abort|} :[divergence free]
assert ROVER_SYSTEM3\{|mission_start, mission_complete, mission_abort|} :[deterministic]

ROVER4({}, _) = 
	mission_complete -> SKIP
	[]
	radiation_level?Green -> ROVER4({}, Green)
	[]
	radiation_level?r:({Red, Orange}) -> ROVER_ABORT
	
ROVER4(WaypointSet, Rad) = 	
	inspect?wp:(WaypointSet) -> ROVER_INSPECTING(WaypointSet, Rad, wp)
	[]
	radiation_level?Green -> ROVER4(WaypointSet, Green)
	[]
	radiation_level?r:({Red, Orange}) -> ROVER_ABORT
	[]
	(member(0,WaypointSet)) & move.0 -> ROVER4(diff(WaypointSet, {0}), Rad)

ROVER_INSPECTING(WaypointSet, Rad, wp) = 	
	move.wp -> ROVER4(diff(WaypointSet, {wp}), Rad)	 -- Ordering is important in diff()
	[]
	radiation_level?Green -> ROVER_INSPECTING(WaypointSet, Green, wp)
	[]
	radiation_level?r:({Red, Orange}) -> ROVER_ABORT
	
ROVER_ABORT = move.0 -> mission_abort -> SKIP

	
ROVER_SYSTEM4 =
mission_start -> 
ROVER4(waypointID, Green) 
; ROVER_SYSTEM4


--Check Single Rover Run
assert ROVER4(waypointID, Green) ; RUN(Events) :[deadlock free]
assert ROVER4(waypointID, Green)  :[divergence free]
assert ROVER4(waypointID, Green)  :[deterministic]


--Check Repeated Rover Runs
assert ROVER_SYSTEM4 :[deadlock free]
assert ROVER_SYSTEM4 :[divergence free]
assert ROVER_SYSTEM4 :[deterministic]

--Check Hiding
assert ROVER_SYSTEM4\{|mission_start, mission_complete, mission_abort|} :[deadlock free]
assert ROVER_SYSTEM4\{|mission_start, mission_complete, mission_abort|} :[divergence free]
assert ROVER_SYSTEM4\{|mission_start, mission_complete, mission_abort|} :[deterministic]
